import{a as i}from"./chunk-II4JDBXY.js";import"./chunk-M5SITFFN.js";import"./chunk-ZPYKVVFF.js";import"./chunk-WNTCOVG2.js";import"./chunk-EEKB62LQ.js";import"./chunk-V3DSE3OK.js";import"./chunk-FMRIJYNG.js";import{a as t}from"./chunk-NNHN6WUY.js";import{a as e}from"./chunk-T7ERZ2CJ.js";import{b as o,c as n,d as r}from"./chunk-GSNDLQ4C.js";import{d as s}from"./chunk-BKSIEBAA.js";import"./chunk-YWRPWWKI.js";import{a as m}from"./chunk-VTVHUB7E.js";import{a as a,d as h}from"./chunk-JMSSU44E.js";import{a as u}from"./chunk-4UYSGV57.js";import"./chunk-ANLJ4KBN.js";import"./chunk-ID6SFQTL.js";import{a as l}from"./chunk-VLPNAR64.js";import{a as p}from"./chunk-GE5NEIZC.js";import{e as c}from"./chunk-35CVRQTC.js";var g=new a,f=new a;function d(i){let t=(i=l(i,l.EMPTY_OBJECT)).positions,e=i.maximumHeights,o=i.minimumHeights;if(!c(t))throw new p("options.positions is required.");if(c(e)&&e.length!==t.length)throw new p("options.positions and options.maximumHeights must have the same length.");if(c(o)&&o.length!==t.length)throw new p("options.positions and options.minimumHeights must have the same length.");let n=l(i.granularity,u.RADIANS_PER_DEGREE),r=l(i.ellipsoid,h.default);this._positions=t,this._minimumHeights=o,this._maximumHeights=e,this._granularity=n,this._ellipsoid=h.clone(r),this._workerName="createWallOutlineGeometry";let s=1+t.length*a.packedLength+2;c(o)&&(s+=o.length),c(e)&&(s+=e.length),this.packedLength=s+h.packedLength+1}d.pack=function(i,t,e){if(!c(i))throw new p("value is required");if(!c(t))throw new p("array is required");e=l(e,0);let o,n=i._positions,r=n.length;for(t[e++]=r,o=0;o<r;++o,e+=a.packedLength)a.pack(n[o],t,e);let s=i._minimumHeights;if(r=c(s)?s.length:0,t[e++]=r,c(s))for(o=0;o<r;++o)t[e++]=s[o];let m=i._maximumHeights;if(r=c(m)?m.length:0,t[e++]=r,c(m))for(o=0;o<r;++o)t[e++]=m[o];return h.pack(i._ellipsoid,t,e),t[e+=h.packedLength]=i._granularity,t};var k=h.clone(h.UNIT_SPHERE),_={positions:void 0,minimumHeights:void 0,maximumHeights:void 0,ellipsoid:k,granularity:void 0};d.unpack=function(i,t,e){let o,n;if(!c(i))throw new p("array is required");t=l(t,0);let r,s=i[t++],m=Array(s);for(r=0;r<s;++r,t+=a.packedLength)m[r]=a.unpack(i,t);if((s=i[t++])>0)for(o=Array(s),r=0;r<s;++r)o[r]=i[t++];if((s=i[t++])>0)for(n=Array(s),r=0;r<s;++r)n[r]=i[t++];let u=h.unpack(i,t,k),g=i[t+=h.packedLength];return c(e)?(e._positions=m,e._minimumHeights=o,e._maximumHeights=n,e._ellipsoid=h.clone(u,e._ellipsoid),e._granularity=g,e):(_.positions=m,_.minimumHeights=o,_.maximumHeights=n,_.granularity=g,new d(_))},d.fromConstantHeights=function(i){let t=(i=l(i,l.EMPTY_OBJECT)).positions;if(!c(t))throw new p("options.positions is required.");let e,o,n=i.minimumHeight,r=i.maximumHeight,s=c(n),m=c(r);if(s||m){let i=t.length;e=s?Array(i):void 0,o=m?Array(i):void 0;for(let t=0;t<i;++t)s&&(e[t]=n),m&&(o[t]=r)}return new d({positions:t,maximumHeights:o,minimumHeights:e,ellipsoid:i.ellipsoid})},d.createGeometry=function(h){let l,p=h._positions,d=h._minimumHeights,k=h._maximumHeights,_=h._granularity,y=h._ellipsoid,w=i.computePositions(y,p,k,d,_,!1);if(!c(w))return;let H=w.bottomPositions,E=w.topPositions,j=E.length,A=2*j,N=new Float64Array(A),L=0;for(j/=3,l=0;l<j;++l){let i=3*l,t=a.fromArray(E,i,g),e=a.fromArray(H,i,f);N[L++]=e.x,N[L++]=e.y,N[L++]=e.z,N[L++]=t.x,N[L++]=t.y,N[L++]=t.z}let v=new e({position:new r({componentDatatype:m.DOUBLE,componentsPerAttribute:3,values:N})}),x=A/3;A=2*x-4+x;let S=t.createTypedArray(x,A),T=0;for(l=0;l<x-2;l+=2){let i=l,t=l+2,e=a.fromArray(N,3*i,g),o=a.fromArray(N,3*t,f);if(a.equalsEpsilon(e,o,u.EPSILON10))continue;let n=l+1,r=l+3;S[T++]=n,S[T++]=i,S[T++]=n,S[T++]=r,S[T++]=i,S[T++]=t}return S[T++]=x-2,S[T++]=x-1,new n({attributes:v,indices:S,primitiveType:o.LINES,boundingSphere:new s.fromVertices(N)})};var y=function(i,t){return c(t)&&(i=d.unpack(i,t)),i._ellipsoid=h.clone(i._ellipsoid),d.createGeometry(i)};export{y as default};