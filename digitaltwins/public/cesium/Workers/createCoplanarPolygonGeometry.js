import{a as t}from"./chunk-4IMXHKCA.js";import{a as e}from"./chunk-RSJQ5FUT.js";import"./chunk-O3CFQFRB.js";import{a as o}from"./chunk-D4TZ3IL5.js";import"./chunk-GHQSI7F2.js";import{a as n}from"./chunk-KM43AUZL.js";import{a as r}from"./chunk-AOALMXNW.js";import"./chunk-CXNPIJLB.js";import"./chunk-APUOR5ZJ.js";import{a as i}from"./chunk-74GQJJ7R.js";import"./chunk-FNJKWSPR.js";import"./chunk-KSZ5EBRB.js";import{b as a}from"./chunk-CKMJZ5B3.js";import{a as s}from"./chunk-WNTCOVG2.js";import"./chunk-EEKB62LQ.js";import"./chunk-V3DSE3OK.js";import"./chunk-FMRIJYNG.js";import{a as c}from"./chunk-NNHN6WUY.js";import{a as p}from"./chunk-T7ERZ2CJ.js";import{b as l,c as u,d as m}from"./chunk-GSNDLQ4C.js";import{d as h}from"./chunk-BKSIEBAA.js";import{f as y}from"./chunk-YWRPWWKI.js";import{a as g}from"./chunk-VTVHUB7E.js";import{a as d,c as k,d as f,e as j}from"./chunk-JMSSU44E.js";import{a as w}from"./chunk-4UYSGV57.js";import"./chunk-ANLJ4KBN.js";import"./chunk-ID6SFQTL.js";import{a as A}from"./chunk-VLPNAR64.js";import{b as x}from"./chunk-GE5NEIZC.js";import{e as v}from"./chunk-35CVRQTC.js";var F=new d,L=new t,P=new k,T=new k,_=new d,b=new d,E=new d,R=new d,C=new d,H=new d,I=new y,N=new j,B=new j,D=new d;function S(t){let e=(t=A(t,A.EMPTY_OBJECT)).polygonHierarchy,n=t.textureCoordinates;x.defined("options.polygonHierarchy",e);let r=A(t.vertexFormat,i.DEFAULT);this._vertexFormat=i.clone(r),this._polygonHierarchy=e,this._stRotation=A(t.stRotation,0),this._ellipsoid=f.clone(A(t.ellipsoid,f.default)),this._workerName="createCoplanarPolygonGeometry",this._textureCoordinates=n,this.packedLength=o.computeHierarchyPackedLength(e,d)+i.packedLength+f.packedLength+(v(n)?o.computeHierarchyPackedLength(n,k):1)+2}S.fromPositions=function(t){return t=A(t,A.EMPTY_OBJECT),x.defined("options.positions",t.positions),new S({polygonHierarchy:{positions:t.positions},vertexFormat:t.vertexFormat,stRotation:t.stRotation,ellipsoid:t.ellipsoid,textureCoordinates:t.textureCoordinates})},S.pack=function(t,e,n){return x.typeOf.object("value",t),x.defined("array",e),n=A(n,0),n=o.packPolygonHierarchy(t._polygonHierarchy,e,n,d),f.pack(t._ellipsoid,e,n),n+=f.packedLength,i.pack(t._vertexFormat,e,n),n+=i.packedLength,e[n++]=t._stRotation,v(t._textureCoordinates)?n=o.packPolygonHierarchy(t._textureCoordinates,e,n,k):e[n++]=-1,e[n++]=t.packedLength,e};var O=f.clone(f.UNIT_SPHERE),J=new i,G={polygonHierarchy:{}};S.unpack=function(t,e,n){x.defined("array",t),e=A(e,0);let r=o.unpackPolygonHierarchy(t,e,d);e=r.startingIndex,delete r.startingIndex;let a=f.unpack(t,e,O);e+=f.packedLength;let s=i.unpack(t,e,J);e+=i.packedLength;let c=t[e++],p=-1===t[e]?void 0:o.unpackPolygonHierarchy(t,e,k);v(p)?(e=p.startingIndex,delete p.startingIndex):e++;let l=t[e++];return v(n)||(n=new S(G)),n._polygonHierarchy=r,n._ellipsoid=f.clone(a,n._ellipsoid),n._vertexFormat=i.clone(s,n._vertexFormat),n._stRotation=c,n._textureCoordinates=p,n.packedLength=l,n},S.createGeometry=function(t){let i=t._vertexFormat,f=t._polygonHierarchy,A=t._stRotation,x=t._textureCoordinates,S=v(x),O=f.positions;if((O=s(O,d.equalsEpsilon,!0)).length<3)return;let J=_,G=b,K=E,Q=C;if(!e.computeProjectTo2DArguments(O,R,Q,H))return;if(J=d.cross(Q,H,J),J=d.normalize(J,J),!d.equalsEpsilon(R,d.ZERO,w.EPSILON6)){let e=t._ellipsoid.geodeticSurfaceNormal(R,D);0>d.dot(J,e)&&(J=d.negate(J,J),Q=d.negate(Q,Q))}let U=e.createProjectPointsTo2DFunction(R,Q,H),V=e.createProjectPointTo2DFunction(R,Q,H);i.tangent&&(G=d.clone(Q,G)),i.bitangent&&(K=d.clone(H,K));let M=o.polygonsFromHierarchy(f,S,U,!1),Z=M.hierarchy,z=M.polygons,W=S?o.polygonsFromHierarchy(x,!0,function(t){return t},!1).polygons:void 0;if(0===Z.length)return;O=Z[0].outerRing;let Y=h.fromPoints(O),X=o.computeBoundingRectangle(J,V,O,A,L),q=[];for(let t=0;t<z.length;t++){let e=new n({geometry:function(t,e,o,n,r,i,s,h,f){let A=t.positions,x=a.triangulate(t.positions2D,t.holes);x.length<3&&(x=[0,1,2]);let L=c.createTypedArray(A.length,x.length);L.set(x);let _=N;if(0!==n){let t=y.fromAxisAngle(s,n,I);if(_=j.fromQuaternion(t,_),e.tangent||e.bitangent){t=y.fromAxisAngle(s,-n,I);let o=j.fromQuaternion(t,B);h=d.normalize(j.multiplyByVector(o,h,h),h),e.bitangent&&(f=d.normalize(d.cross(s,h,f),f))}}else _=j.clone(j.IDENTITY,_);e.st&&(T.x=o.x,T.y=o.y);let b=A.length,E=3*b,R=new Float64Array(E),C=e.normal?new Float32Array(E):void 0,H=e.tangent?new Float32Array(E):void 0,D=e.bitangent?new Float32Array(E):void 0,S=e.st?new Float32Array(2*b):void 0,O=0,J=0,G=0,K=0,Q=0;for(let t=0;t<b;t++){let n=A[t];if(R[O++]=n.x,R[O++]=n.y,R[O++]=n.z,e.st){if(v(r)&&r.positions.length===b)S[Q++]=r.positions[t].x,S[Q++]=r.positions[t].y;else{let t=i(j.multiplyByVector(_,n,F),P);k.subtract(t,T,t);let e=w.clamp(t.x/o.width,0,1),r=w.clamp(t.y/o.height,0,1);S[Q++]=e,S[Q++]=r}}e.normal&&(C[J++]=s.x,C[J++]=s.y,C[J++]=s.z),e.tangent&&(H[K++]=h.x,H[K++]=h.y,H[K++]=h.z),e.bitangent&&(D[G++]=f.x,D[G++]=f.y,D[G++]=f.z)}let U=new p;return e.position&&(U.position=new m({componentDatatype:g.DOUBLE,componentsPerAttribute:3,values:R})),e.normal&&(U.normal=new m({componentDatatype:g.FLOAT,componentsPerAttribute:3,values:C})),e.tangent&&(U.tangent=new m({componentDatatype:g.FLOAT,componentsPerAttribute:3,values:H})),e.bitangent&&(U.bitangent=new m({componentDatatype:g.FLOAT,componentsPerAttribute:3,values:D})),e.st&&(U.st=new m({componentDatatype:g.FLOAT,componentsPerAttribute:2,values:S})),new u({attributes:U,indices:L,primitiveType:l.TRIANGLES})}(z[t],i,X,A,S?W[t]:void 0,V,J,G,K)});q.push(e)}let $=r.combineInstances(q)[0];$.attributes.position.values=new Float64Array($.attributes.position.values),$.indices=c.createTypedArray($.attributes.position.values.length/3,$.indices);let tt=$.attributes;return i.position||delete tt.position,new u({attributes:tt,indices:$.indices,primitiveType:$.primitiveType,boundingSphere:Y})};var K=function(t,e){return v(e)&&(t=S.unpack(t,e)),S.createGeometry(t)};export{K as default};